推送本地 master 分支到远程 <remotebranchname> 分支:
git push origin master:<remotebranchname>

删除远程 <remotebranchname> 分支:
git push origin :coding-pages

推送指定 <commit SHA> 的记录到指定 <remotebranchname> 分支
git push <remotename> <commit SHA>:<remotebranchname>

回退从 <older commit SHA> 到 <newer commit SHA> 范围的记录的状态到当前工作区
git revert -n <older commit SHA>^..<newer commit SHA>

在远程版本库创建了一个分支后，在本地创建远程追踪分支
git remote update

在远程删除若干分支后，在本地删除这些已经失效的远程追踪分支
git remote prune <remotename>

查看已暂存的变动内容
git diff --cached

获取 <remotename> 上的 tag 信息
git fetch <remotename> --tags

GitHub 下载 Pull Request 为 patch/diff 文件
https://github.com/<user>/<repo>/pull/<id>.patch
https://github.com/<user>/<repo>/pull/<id>.diff

拉取 GitHub Pull Request 到本地 (假设 GitHub 即 origin)
git pull origin pull/<id>/head
git fetch origin pull/<id>/head:PR # 拉取到新的叫 PR 的分支

拉取 GitLab Merge Request 到本地 (假设 GitLab 即 origin)
git pull origin merge-requests/<id>/head
git fetch origin merge-requests/<id>/head:PR # 拉取到新的叫 PR 的分支

查找被误删的 commit 或分支，以变恢复
git reflog

当 reflog 都无法找到提交相关的数据时
git fsck --unreachable --no-reflog # 试图检索 unreachable 的提交数据，但略过 reflog 可以显示的内容
git fsck --dangling --no-reflog # 试图检索 dangling 的提交数据，但略过 reflog 可以显示的内容
unreachable 和 dangling 的含义和区别参阅 git 文档。
Pro Git 中关于 Git 数据维护和恢复的章节：https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery

清理无用数据（比如 unreachable 的 commit）
git gc