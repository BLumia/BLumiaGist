从 <commit SHA> 创建一个新分支 branch-name
git branch branch-name <commit SHA> # 这个操作【不会改变】当前工作区和头指针 HEAD
git checkout -b branch-name <commit SHA> # 这个会使当前工作区以及 HEAD 都变动到新分支上
// 查前者的需求是想在不变动工作区/切出去的情况下 cherry-pick 当前分支的某个 commit 到另一个分支，但好像不能..

推送本地 master 分支到远程 <remotebranchname> 分支:
git push origin master:<remotebranchname>

删除远程 <remotebranchname> 分支:
git push origin :coding-pages

推送指定 <commit SHA> 的记录到指定 <remotebranchname> 分支
git push <remotename> <commit SHA>:<remotebranchname>

回退从 <older commit SHA> 到 <newer commit SHA> 范围的记录的状态到当前工作区
git revert -n <older commit SHA>^..<newer commit SHA>

在远程版本库创建了一个分支后，在本地创建远程追踪分支
git remote update

在远程删除若干分支后，在本地删除这些已经失效的远程追踪分支
git remote prune <remotename>

查看已暂存的变动内容
git diff --cached

获取 <remotename> 上的 tag 信息
git fetch <remotename> --tags

GitHub 下载 Pull Request 为 patch/diff 文件
https://github.com/<user>/<repo>/pull/<id>.patch
https://github.com/<user>/<repo>/pull/<id>.diff

拉取 GitHub Pull Request 到本地 (假设 GitHub 即 origin)
git pull origin pull/<id>/head
git fetch origin pull/<id>/head:PR # 拉取到新的叫 PR 的分支
对应的 [alias] 配置
  pr = !sh -c 'git fetch $1 pull/$2/head:pr-$1-$2 && git checkout pr-$1-$2' -

拉取 GitLab Merge Request 到本地 (假设 GitLab 即 origin) ([git alias](https://gitlab.com/help/user/project/merge_requests/index.md#checkout-locally-by-adding-a-git-alias))
git pull origin merge-requests/<id>/head
git fetch origin merge-requests/<id>/head:PR # 拉取到新的叫 PR 的分支
对应的 [alias] 配置
  mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -

查找被误删的 commit 或分支，以变恢复
git reflog

当 reflog 都无法找到提交相关的数据时
git fsck --unreachable --no-reflog # 试图检索 unreachable 的提交数据，但略过 reflog 可以显示的内容
git fsck --dangling --no-reflog # 试图检索 dangling 的提交数据，但略过 reflog 可以显示的内容
unreachable 和 dangling 的含义和区别参阅 git 文档。
Pro Git 中关于 Git 数据维护和恢复的章节：https://git-scm.com/book/en/v2/Git-Internals-Maintenance-and-Data-Recovery

清理无用数据（比如 unreachable 的 commit）
git gc

二分查找定位是哪个 commit 引入了 bug
git bisect start # 开始标记，会帮助记录你当前位置，以便 reset 时回到初始状态
git bisect good <没 bug 的 SHA>
git bisect bad <有 bug 的 SHA> # 这时位置应是两个 SHA 中间
这时确认当前位置的状态有没有 bug ，有就执行 git bisect bad ，没有就 good ，就会继续到下一个二分区间继续查找，直到定位到 bug 的 SHA 即可
git bisect reset 结束，重置回初始状态。

